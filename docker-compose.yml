services:
  # ZooKeeper: Distributed coordination service used by Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15 # Official Confluent ZooKeeper image
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # Port for client connections
      ZOOKEEPER_TICK_TIME: 2000    # Basic time unit in milliseconds
    ports:
      - 2181:2181  # Expose Zookeeper port 2181 from the container to the host

  # Kafka: Distributed streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.4.0  # Use specific version that supports ZooKeeper
    depends_on:
      - zookeeper  # Ensure ZooKeeper starts after Zookeeper
    ports:
      - 9092:9092  # Expose Kafka port to the host
    environment:
      KAFKA_BROKER_ID: 1  # Unique ID for this broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # ZooKeeper connection string
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Number of replicas for internal Kafka topics, set to 1 for single-node setup
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'  # Allow automatic topic creation
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # Reduce startup time
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1  # Fix for ksqlDB transactions
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1  # Fix for ksqlDB transactions

  # Kafka UI: Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest  # Kafka UI image by Provectus
    depends_on:
      - kafka
      - connect  # Ensures Kafka UI starts after Kafka and Debezium
    ports:
      - 8080:8080  # Expose UI on port 8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local  # Name for the Kafka cluster in the UI
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092  # Kafka bootstrap server for the UI
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181  # Zookeeper connection for the UI
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
      DYNAMIC_CONFIG_ENABLED: 'true'
      AUTH_TYPE: LOGIN_FORM  # Authentication type for Kafka UI
      SPRING_SECURITY_USER_NAME: admin  # username to login to ui
      SPRING_SECURITY_USER_PASSWORD: Admin@123  # password to login to ui

  connect:
    image: debezium/connect:2.4
    depends_on:
      - kafka
      - postgres
      - postgres-target
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      STATUS_STORAGE_REPLICATION_FACTOR: "1"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

  # PostgreSQL: Source database
  postgres:
    image: postgres:13  # Official PostgreSQL image
    ports:
      - 5433:5432  # Expose PostgreSQL on port 5433 to avoid conflicts
    environment:
      POSTGRES_DB: inventory   # Name of the PostgreSQL database
      POSTGRES_USER: postgres     # Username for PostgreSQL
      POSTGRES_PASSWORD: postgres   # Password for PostgreSQL
    command: ["postgres", "-c", "wal_level=logical"]  # Enable logical replication
    volumes:
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql  # Init script
      - 'postgres_data:/var/lib/postgresql/data'
      - './backups:/mnt/storage/backups/'

  postgres-target:
    image: postgres:13  # Official PostgreSQL image
    ports:
      - 5434:5432  # Expose PostgreSQL on port 5434 to avoid conflicts
    environment:
      POSTGRES_DB: inventory   # Name of the PostgreSQL database
      POSTGRES_USER: postgres     # Username for PostgreSQL
      POSTGRES_PASSWORD: postgres   # Password for PostgreSQL

  # Schema Registry: Manages Avro schemas for Kafka topics
  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.15
    depends_on:
      - kafka
    ports:
      - 8081:8081  # Expose Schema Registry API on port 8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
  
  # ksqlDB: Streaming SQL engine for Apache Kafka
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    depends_on:
      - kafka
    ports:
      - 8088:8088  # Expose ksqlDB REST API on port 8088
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: "ksql_service_"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
    volumes:      
      - ./files/ksqldb-server:/etc/ksqldb-server

  # docker-compose exec ksqldb-cli  ksql http://ksqldb-server:8088
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.14.0
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./files/ksqldb-cli:/etc/sql
    
volumes:
  postgres_data: